### Write your code here
ggplot(combinedAB, aes(x = Algal_Density, fill = Location)) +
geom_density(alpha = 0.5) +
labs(x = "Algal Density", y = "Density Estimate") +
ggtitle("Kernel Density Estimation of Algal Densities in Locations A and B") +
scale_fill_manual(values = c("Location A" = "blue", "Location B" = "red"))
library(ggplot)
library(ggplot2)
### Write your code here
ggplot(combinedAB, aes(x = Algal_Density, fill = Location)) +
geom_density(alpha = 0.5) +
labs(x = "Algal Density", y = "Density Estimate") +
ggtitle("Kernel Density Estimation of Algal Densities in Locations A and B") +
scale_fill_manual(values = c("Location A" = "blue", "Location B" = "red"))
### Write your code here
ggplot(combinedAB, aes(x = Algal_Density, fill = Location)) +
geom_density(alpha = 0.5) +
labs(x = "Algal Density", y = "Density Estimate") +
ggtitle("Kernel Density Estimation of Algal Densities in Locations A and B") +
scale_fill_manual(values = c("Location A" = "blue", "Location B" = "red"))
library(ggplot2)
### Write your code here
ggplot(combinedAB, aes(x = Algal_Density, fill = Location)) +
geom_density(alpha = 0.5) +
labs(x = "Algal Density", y = "Density Estimate") +
ggtitle("Kernel Density Estimation of Algal Densities in Locations A and B") +
scale_fill_manual(values = c("Location A" = "blue", "Location B" = "red"))
### Write your code here
library(ggplot2)
mean_density_locationA <- 200
mean_density_locationB <- 220
std <- 20
n <- 50
#creating the
locationA <- rnorm(n, mean_density_locationA, std)
locationB <- rnorm(n, mean_density_locationB, std)
#make each location have a different value to tell between locations
locAB <- c(locationA, locationB)
label_location <- c(rep(1, n), rep(2,n))
combinedAB <- data.frame("Algal_Density" = locAB, Location = factor(label_location, levels = c(1,2), labels = c("Location A", "Location B")))
head(combinedAB)
### Write your code here
ggplot(combinedAB, aes(x = Algal_Density, fill = Location)) +
geom_density(alpha = 0.5) +
labs(x = "Algal Density", y = "Density Estimate") +
ggtitle("Kernel Density Estimation of Algal Densities in Locations A and B") +
scale_fill_manual(values = c("Location A" = "blue", "Location B" = "red"))
### Write your code here
ggplot(combinedAB, aes(x = Algal_Density, fill = Location)) +
geom_density(alpha = 0.5, adjust=1.5) +
labs(x = "Algal Density", y = "Density Estimate") +
ggtitle("Kernel Density Estimation of Algal Densities in Locations A and B") +
scale_fill_manual(values = c("Location A" = "blue", "Location B" = "red"))
### Write your code here
ggplot(combinedAB, aes(x = Algal_Density, fill = Location)) +
geom_density(alpha = 0.5, adjust=1.5) +
labs(x = "Algal Density", y = "Density Estimate") +
ggtitle("Kernel Density Estimation of Algal Densities in Locations A and B") +
scale_fill_manual(values = c("Location A" = "blue", "Location B" = "red"))+
xlim(120, 300)
# Chunk 1
### Exercise 1.
# Chunk 2
5. You have the following data which you obtained from an experiment consisting of <complete this>. Use the t-test to assess the difference between both samples. What does the t-test indicate about the data? Is it generated from the same distribution?
### Exercise 1.
library(ggplot2)
npairs <- 100
nsamples <- 50
meanval <- 10
stdval <- 4
s1 <- rnorm(n=nsamples, mean=meanval, std=stdval)
rnorm?
asd
helo(rnorm)
help(rnorm)
s1 <- rnorm(n=nsamples, mean=meanval, sd=stdval)
s2 <- rnorm(n=nsamples, mean=meanval, sd=stdval)
mean_difference <- numeric(num_pairs)
mean_difference <- numeric(npairs)
# Generate the samples and calculate the differences in means
for (i in 1:num_pairs) {
s1 <- rnorm(n=nsamples, mean=meanval, sd=stdval)
s2 <- rnorm(n=nsamples, mean=meanval, sd=stdval)
mean_differences[i] <- mean(s1) - mean(s2)
}
# Generate the samples and calculate the differences in means
for (i in 1:npairs) {
s1 <- rnorm(n=nsamples, mean=meanval, sd=stdval)
s2 <- rnorm(n=nsamples, mean=meanval, sd=stdval)
mean_differences[i] <- mean(s1) - mean(s2)
}
# Generate the samples and calculate the differences in means
for (i in 1:npairs) {
s1 <- rnorm(n=nsamples, mean=meanval, sd=stdval)
s2 <- rnorm(n=nsamples, mean=meanval, sd=stdval)
mean_difference[i] <- mean(s1) - mean(s2)
}
# Generate the samples and calculate the differences in means
for (i in 1:npairs) {
mean_difference[i] <- mean(s1) - mean(s2)
}
i
mean_difference
# Create a data frame to store the differences in means
data <- data.frame(mean_difference)
# Create a ggplot object and add a histogram with a density curve
ggplot(data, aes(x = mean_difference)) +
geom_histogram(binwidth = 0.5, fill = "lightblue", color = "black", alpha = 0.7) +
geom_density(color = "red", size = 1) +
labs(title = "Distribution of Mean Differences",
x = "Mean Difference") +
theme_minimal()
# Create a ggplot object and add a histogram with a density curve
ggplot(data, aes(x = mean_difference)) +
geom_histogram(binwidth = 0.5, fill = "lightblue", color = "black", alpha = 0.7) +
geom_density(color = "red", size = 8) +
labs(title = "Distribution of Mean Differences",
x = "Mean Difference") +
theme_minimal()
# Create a ggplot object and add a histogram with a density curve
ggplot(data, aes(x = mean_difference)) +
geom_histogram(binwidth = 0.1, fill = "lightblue", color = "black", alpha = 0.7) +
geom_density(color = "red", size = 1) +
labs(title = "Distribution of Mean Differences",
x = "Mean Difference") +
theme_minimal()
#loop
for(i in 1:5){
print(i)
}
rm(list=ls())
### Exercise 1.
some_array <- 1:5
some_array
some_array[1] <- some_array[1] - 1
some_array[2] <- some_array[2] - 1
some_array[3] <- some_array[3] - 1
some_array[4] <- some_array[4] - 1
some_array[5] <- some_array[5] - 1
some_array
#loop
for(i in 1:5){
print(i)
}
### Exercise 1.
some_array <- 10:15
some_array
some_array[1] <- some_array[1] - 1
some_array[2] <- some_array[2] - 1
some_array[3] <- some_array[3] - 1
some_array[4] <- some_array[4] - 1
some_array[5] <- some_array[5] - 1
some_array
a <- rnorm(10, 0, 1)
b <- rnorm(10, 0, 1)
mean(a) - mean(b)
#repeat this multiple times - use a for loop
for(batch in 1:10){
a <- rnorm(10, 0, 1)
b <- rnorm(10, 0, 1)
mean(a) - mean(b)
}
#repeat this multiple times - use a for loop
for(batch in 1:10){
a <- rnorm(10, 0, 1)
b <- rnorm(10, 0, 1)
print(mean(a) - mean(b))
}
#create a list/array to store for loop in
list <- 1:10
#repeat this multiple times - use a for loop
for(batch in 1:10){
a <- rnorm(10, 0, 1)
b <- rnorm(10, 0, 1)
print(mean(a) - mean(b))
list[batch] <- (mean(a) - mean(b))
}
library(ggplot2)
generate_diff_means <- function(n, size_1, size_2, mu_1=0, sd_1=1, mu_2=0, sd_2=1){
diff_means = 1:n
for (sample_number in 1: n){
s1 = rnorm(size_1, mu_1, sd_1)
s2 = rnorm(size_2, mu_2, sd_2)
diff_means[sample_number] <- mean(s1) - mean(s2)
}
diff_means
}
# Write your code here
n <- 100
size_1 <- 50
size_2 <- 50
mu_1 <- 10
sd_1 <- 3
mu_2 <- 10
sd_2 <- 3
generate_diff_means <- function(n, size_1, size_2, mu_1=0, sd_1=1, mu_2=0, sd_2=1){
diff_means = 1:n
for (sample_number in 1: n){
s1 = rnorm(size_1, mu_1, sd_1)
s2 = rnorm(size_2, mu_2, sd_2)
diff_means[sample_number] <- mean(s1) - mean(s2)
}
diff_means
}
View(generate_diff_means)
print(diff_means)
diff_means
generate_diff_means <- function(n, size_1, size_2, mu_1=0, sd_1=1, mu_2=0, sd_2=1){
diff_means = 1:n
for (sample_number in 1: n){
s1 = rnorm(size_1, mu_1, sd_1)
s2 = rnorm(size_2, mu_2, sd_2)
diff_means[sample_number] <- mean(s1) - mean(s2)
}
diff_means
}
print(diff_means)
View(generate_diff_means)
print(sample_number)
generate_diff_means <- function(n, size_1, size_2, mu_1=0, sd_1=1, mu_2=0, sd_2=1){
diff_means = 1:n
for (sample_number in 1: n){
s1 = rnorm(size_1, mu_1, sd_1)
s2 = rnorm(size_2, mu_2, sd_2)
diff_means[sample_number] <- mean(s1) - mean(s2)
}
diff_means
}
print(sample_number)
generate_diff_means <- function(n, size_1, size_2, mu_1=0, sd_1=1, mu_2=0, sd_2=1){
diff_means = 1:n
for (sample_number in 1: n){
s1 <- rnorm(size_1, mu_1, sd_1)
s2 <- rnorm(size_2, mu_2, sd_2)
diff_means[sample_number] <- mean(s1) - mean(s2)
}
diff_means
}
View(generate_diff_means)
# Parameter definitions
library(ggplot2)
diff_means <- 1:n
generate_diff_means <- function(n, size_1, size_2, mu_1=0, sd_1=1, mu_2=0, sd_2=1){
diff_means = 1:n
for (sample_number in 1: n){
s1 <- rnorm(size_1, mu_1, sd_1)
s2 <- rnorm(size_2, mu_2, sd_2)
diff_means[sample_number] <- mean(s1) - mean(s2)
}
diff_means
}
print(diff_means)
generate_diff_means <- function(n, size_1, size_2, mu_1=0, sd_1=1, mu_2=0, sd_2=1){
diff_means = 1:n
for (sample_number in 1: n){
s1 <- rnorm(size_1, mu_1, sd_1)
s2 <- rnorm(size_2, mu_2, sd_2)
diff_means[sample_number] <- mean(s1) - mean(s2)
}
diff_means
}
# Parameter definitions
library(ggplot2)
n <- 100
size_1 <- 50
size_2 <- 50
mu_1 <- 10
sd_1 <- 3
mu_2 <- 10
sd_2 <- 3
diff_means <- 1:n
generate_diff_means <- function(n, size_1, size_2, mu_1=0, sd_1=1, mu_2=0, sd_2=1){
diff_means = 1:n
for (sample_number in 1: n){
s1 <- rnorm(size_1, mu_1, sd_1)
s2 <- rnorm(size_2, mu_2, sd_2)
diff_means[sample_number] <- mean(s1) - mean(s2)
}
diff_means
}
generate_diff_means(n=100, size_1=50, size_2=50, mu_1=10, sd_1=3, mu_2=10, sd_2=3)
#fill in the parameters for the function created - applying the fuction to get actual values
mean_diff <- generate_diff_means(n=100, size_1=50, size_2=50, mu_1=10, sd_1=3, mu_2=10, sd_2=3)
# Parameter definitions
library(ggplot2)
n <- 100
size_1 <- 50
size_2 <- 50
mu_1 <- 10
sd_1 <- 3
mu_2 <- 10
sd_2 <- 3
#creating the function
generate_diff_means <- function(n, size_1, size_2, mu_1=0, sd_1=1, mu_2=0, sd_2=1){
diff_means = 1:n
for (sample_number in 1: n){
s1 <- rnorm(size_1, mu_1, sd_1)
s2 <- rnorm(size_2, mu_2, sd_2)
diff_means[sample_number] <- mean(s1) - mean(s2)
}
diff_means
}
#fill in the parameters for the function created - applying the fuction to get actual values
mean_diff <- generate_diff_means(n=100, size_1=50, size_2=50, mu_1=10, sd_1=3, mu_2=10, sd_2=3)
mean_diff
# Write your code here
#kernel density estimation (geom_density)
abs(mean_diff)
# Write your code here
#kernel density estimation (geom_density)
sum(abs(mean_diff)) >= 2.3
# Write your code here
#kernel density estimation (geom_density)
sum(abs(mean_diff) >= 2.3)
# Write your code here
#kernel density estimation (geom_density)
sum(abs(mean_diff) >= 2.3) / length(means_diff)
# Write your code here
#kernel density estimation (geom_density)
sum(abs(mean_diff) >= 2.3) / length(mean_diff)
# Write your code here
sum(abs(mean_diff) >= 0.2) / length(mean_diff)
dataset_1 <- c( 9.22, 11.12, 8.91, 10.9, 9.91, 9.74, 9.39, 10.77, 10.51, 8.78, 8.86, 10.15, 10.4, 8.89, 9.82, 10.89, 10.26, 10.72, 8.72, 9.03, 9.99, 7.65, 9.7, 9.2, 10.86 )
dataset_2 <- c( 12.21, 10.14, 10.84, 9.31, 9.8, 10.16, 9.25, 11, 10.09, 9.34, 9.02, 9.84, 9.99, 10.98, 11.16, 12.02, 11.17, 9.87, 10.32, 9, 9.8, 10.38, 11.06, 10.65, 10.1 )
# Write your code here
t.test(dataset_1, dataset_2)
mean(sample_1) - mean(sample_2)
# Write your function here
diff_between_means <- function(sample_1, sample_2){
mean(s1) - mean(s2)
}
diff_between_means(s1=c(1, 2, 3), s2=c(1, 2, 3))
mean(s1) - mean(s2)
diff_between_means(s1=c(1, 2, 3), s2=c(1, 2, 3))
mean(s1) - mean(s2)
# Write your function here
diff_between_means <- function(s1, s2){
mean(s1) - mean(s2)
}
diff_between_means(s1=c(1, 2, 3), s2=c(1, 2, 3))
diff_between_means(s1=c(3, 3, 3), s2=c(1, 1, 1))
library(testit)
assert(
diff_between_means(s1=c(1, 2, 3), s2=c(1, 2, 3)) == 0
)
assert(
diff_between_means(s1=c(3, 3, 3), s2=c(1, 1, 1))  == 2
)
numbers <- c(1, 2, 3, 4, 5)
for (num in numbers) {
squared <- num * num
print(squared)
}
test_values <- c("Honolulu", "Los Angeles", "San Francisco", "New York")
for (position in test_values){
position <- which(test_values)
print(position)
}
for (i in test_values){
position <- paste(i, test_values(i))
print(position)
}
test_values <- c("Honolulu", "Los Angeles", "San Francisco", "New York")
for (i in test_values){
position <- paste(i, test_values(i))
print(position)
}
print(position)
for (i in test_values){
position <- paste(i, test_values[i])
print(position)
}
for (i in test_values){
position <- paste(i, test_values[i])
print(position)
}
for (i in c(1,2,3,4)){
position <- (paste(i, test_values[i]))
print(position)
}
test_values <- c("New York", "Los Angeles", "San Francisco", "Honolulu")
print(substr(test_values[i], start=1, stop=i)
}
for (i in 1:4){
print(substr(test_values[i], start=1, stop=i))
for (i in 1:4) {
print(substr(test_values[i], start=1, stop=i))
}
for (i in 1:4) {
print(substr(test_values[i], start=1, stop=i))
}
city_name <- "Honolulu"
substr(city_name, start=1, stop=3)  # This will output "Hon"
city_name <- "Honolulu"
substr(city_name, start=1, stop=3)  # This will output "Hon"
```{r}
for (i in 1:4) {
print(substr(test_values[i], start=1, stop=i))
}
for (i in 1:4) {
print(paste(i, (substr(test_values[i], start=1, stop=i))))
}
values <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
for (i in 1:length(values)) {
print(sum(seq(2, 10, 2))) #take every other value in the sequence of 2:10
}
accumulator <- 0
for (i in seq(2, 10, 2)) {
accumulator <- i + accumulator #take every other value in the sequence of 2:10
print(accumulator)
}
for (i in seq(2, 10, 2)) {
accumulator <- values[i] + accumulator #take every other value in the sequence of 2:10
print(accumulator)
}
accumulator <- 0
for (i in seq(2, 10, 2)) {
accumulator <- values[i] + accumulator #take every other value in the sequence of 2:10
print(accumulator)
}
numbers <- c(1,2,3,4,5,6,7)
numbers <- c(1,2,3,4,5,6,7)
products <- numbers * value[i]
print(products)
accum <- 1
products <- accum * value[i]
print(products)
for (i in 1:length(numbers)) {
products <- accum * numbers[i]
print(products)
}
products <- 1
for (i in 1:length(numbers)) {
products <- products * numbers[i]
print(products)
}
prod <- 1:6 #6 because 1 - length of the vector being used
print(numbers[i] * prod[i-1])
#for storing in a vector
prod <- 1:6 #6 because 1 - length of the vector being used
for (i in 2:length(numbers)) { #2:7 because we want to start multiplication with the second value in numbers
print(numbers[i] * prod[i-1])
}
#for storing in a vector
prod <- 1:6 #6 because 1 - length of the vector being used
for (i in 2:length(numbers)) { #2:7 because we want to start multiplication with the second value in numbers
print(prod[i] <- numbers[i] * prod[i-1])
}
prod
library(testit)
a <- 1
survey_data = read.csv("./data//RIKZ.txt", sep = "\t")
survey_data = read.csv("./data//RIKZ.txt", sep = "\t")
survey_data = read.csv("./data/RIKZ.txt", sep = "\t")
survey_data = read.csv("./RIKZ.txt", sep = "\t")
survey_data = read.csv("./RIKZ.txt", sep = "\t")
survey_data <- read.csv("./RIKZ.txt", sep = "\t")
survey_data <- read.csv("./RIKZ.txt", sep = "\t")
getcwd()
getcwd()
getwd(
)
#observed
o <- c(254, 96)
#expected
e <- c(263, 87)
chi_square <- chisq.test(o, p=e/sum(e))
print(chi_square)
test <- length(10000)
print(test)
test <- n
test <- length(n)
test
for (i in 1:n) {
data <- rmultinom(n, sample_size, ratio)
chi <- sum((data - o)^2 / e)
test[i] <- chi
}
n <- 10000
sample_size <- 350
ratio <- c(3, 1)
o <- c(254, 96)
test <- length(n)
for (i in 1:n) {
data <- rmultinom(n, sample_size, ratio)
chi <- sum((data - o)^2 / e)
test[i] <- chi
}
print(test)
hist(test, main = "Distribution of Simulated Chi-Squared Test Statistics", xlab = "Chi-Squared Statistic")
hist(test, main = "Distribution of Simulated Chi-Squared Test Statistics", xlab = "Chi-Squared Statistic")
observed_chi <- sum((o - e)^2 / e)
abline(v = observed_chi, col = "red", lwd = 2)
p_value <- mean(test >= observed_chi)
p_value
observed_chi <- sum((o - e)^2 / e)
abline(v = observed_chi, col = "red", lwd = 2)
hist(test, main = "Distribution of Simulated Chi-Squared Test Statistics", xlab = "Chi-Squared Statistic")
abline(v = observed_chi, col = "red", lwd = 2)
p_value <- mean(test >= observed_chi)
p_value
